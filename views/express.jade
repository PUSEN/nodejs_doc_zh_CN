include header
header#overview.subhead
  div.container
    h1 EXRRESS
    p.lead test text
div.container
  div.row
    include express_menu
    div.span9
      section#application
        .page-header
          h1 application

        h2#app app

        p Application 原型.

        h2#app_use app.use()

        p 代理 
          code connect#use()
          |  对加载的应用程序进行设置。

        h2#app_engine app.engine()

        p 对给定模板引擎注册回调函数。例如EJS 模板引擎默认只处理“.ejs”文件，如果你还希望它能够处理“.html”文件，你可以利用以下代码进行设置。

        pre
          code app.engine('html', require('ejs').renderFile);

        p 在这个例子中，EJS 提供了一个 Express 所需要的方法 
          code .renderFile()
          | ，具有 
          code (path, options, callback)
          |  三个参数。

        p 有些模板引擎并没有遵守这个约定，
          a(href="/consolidate") Consolidate.js 
          |  库可以解决这类问题，它对 node 主流的模板引擎进行映射，以便使它们可以和 Express 无缝的协同工作。

        h2#app_param app.param()

        p Map the given param placeholder 
          code name
          | (s) to the given callback(s).

        p Parameter mapping is used to provide pre-conditions to routes which use normalized placeholders. For example a 
          em :user_id
          | parameter could automatically load a user's information from the database without any additional code,

        p The callback uses the samesignature as middleware, the only differencing being that the value of the placeholder is passed, in this case the id of the user. Once the 
          code next()
          | function is invoked, just like middleware it will continue on to execute the route, or subsequent parameter functions.

        pre
          code app.param('user_id', function(req, res, next, id){
            |   User.find(id, function(err, user){
            |     if (err) {
            |       next(err);
            |     } else if (user) {
            |       req.user = user;
            |       next();
            |     } else {
            |       next(new Error('failed to load user'));
            |     }
            |   });
            | });

        h2#app_set app.set()

        p Assign 
          code setting 
          | to 
          code val
          | , or return 
          code setting
          | 's value.

        pre
          code 
            | app.set('foo', 'bar');
            | app.get('foo');
            | // => "bar"

        p Mounted servers inherit their parent server's settings.
        
        h2#app_enabled app.enabled()

        p Check if 
          code setting
          | is enabled (truthy).

        pre
          code app.enabled('foo')
            | // => false
            |
            | app.enable('foo')
            | app.enabled('foo')
            | // => true

        h2#app_disabled app.disabled()

        p Check if setting is disabled.

        pre
          code app.disabled('foo')
            | // => true
            |
            | app.enable('foo')
            | app.disabled('foo')
            | // => false

        h2#app_enable app.enable()

        p Enable 
          code setting
          | .

        h2#app_disable app.disable()

        p Disable 
          code setting
          | .
        
        h2#app_configure app.configure()

        p Configure callback for zero or more 
          code envs
          | , when no env is specified that callback will be invoked for all environments. Any combination can be used multiple times, in any order desired.

        p ## Examples

        pre
          code app.configure(function(){
            |   // executed for all envs
            | });

            | app.configure('stage', function(){
            |   // executed staging env
            | });

            | app.configure('stage', 'production', function(){
            |   // executed for stage and production
            | });

        p ## Note

        p These callbacks are invoked immediately, and are effectively sugar for the following.

        pre
          code var env = process.env.NODE_ENV || 'development';
            |
            | switch (env) {
            |   case 'development':
            |     ...
            |     break;
            |   case 'stage':
            |     ...
            |     break;
            |   case 'production':
            |     ...
            |     break;
            | }

        h2#app_all app.all()

        p Special-cased "all" method, applying the given route 
          code path
          | , middleware, and callback to every HTTP method.

        h2#app_render app.render()

        p Render the given view 
          code name 
          | name with 
          code options
          | and a callback accepting an error and the rendered template string.

        p ## Example

        pre
          code app.render('email', { name: 'Tobi' }, function(err, html){
            |   // ...
            | })

        h2#app_listen app.listen()

        p Listen for connections.

        p A node 
          code http.Server
          | is returned, with this application (which is a
          code Function
          | ) as its callback. If you wish to create both an HTTP and HTTPS server you may do so with the "http" and "https" modules as shown here.

        pre
          code var http = require('http')
            |   , https = require('https')
            |   , express = require('express')
            |   , app = express();
            |
            | http.createServer(app).listen(80);
            | http.createServer({ ... }, app).listen(443);
